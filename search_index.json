[["架构设计模版.html", "Chapter 10 架构设计模版 10.1 备选方案模板优化版 10.2 话架构图", " Chapter 10 架构设计模版 10.1 备选方案模板优化版 10.1.1 需求介绍 背景与目标 随着前浪微博业务的快速发展，各子系统之间的调用频次与复杂度不断增加，当前采用的同步调用模式暴露出多种问题： 性能问题：微博发布子系统需同步调用“统计子系统”“审核子系统”“奖励子系统”等8个子系统，导致性能瓶颈，发布速度显著降低。 耦合问题：新增子系统（如“广告子系统”）时，需开发接口供微博发布子系统调用，开发流程冗长。 效率问题：各子系统接口参数与实现存在差异，频繁设计、调试接口导致开发与测试重复工作量大。 目标 为了解决上述问题，计划引入消息队列来实现系统解耦，将现有同步调用模式转变为异步通知模式。 10.1.2 需求分析 10.1.2.1 5W 分析 Who：消息队列主要服务于各业务子系统，用于发送或接收异步消息。 When：在需要异步通知时，各子系统通过消息队列实现消息交互。 What：开发一个具备高性能、高可靠性的消息队列系统。 Where：在开发、测试、生产环境中均需部署。 Why：通过引入消息队列，实现系统间的解耦，优化性能并提升开发效率。 10.1.2.2 1H 分析 关键业务流程： 消息发送：业务子系统将消息发送至消息队列。 消息接收：业务子系统从消息队列获取所需消息。 10.1.2.3 8C 分析 约束条件 说明 性能 需达到 Kafka 的性能水平，支持高并发读写。 成本 参考业界成熟方案，硬件成本控制在10台服务器以内。 时间 第一个版本需在3个月内上线，并支持两个业务场景的尝试使用。 可靠性 消息队列系统需具备99.99%的可靠性，保证消息的写入、存储与读取高可用。 安全性 系统仅限于内网使用，消息加密由消息发送方负责，队列系统不提供通用加密功能。 合规性 开发与运维需符合公司现有的 DevOps 规范。 技术性 开发团队以 Java 为主，建议使用 Java 开发。 兼容性 无需考虑历史系统兼容性，系统为全新开发。 10.1.3 复杂度分析 10.1.3.1 高可用 消息队列需要高可用性，以保证核心业务场景不受影响： - 审核子系统：若消息丢失，可能导致未经过审查的内容上线，引发严重法律风险。 - 奖励子系统：丢失用户奖励消息可能导致用户体验不佳和客户流失。 10.1.3.2 高性能 根据业务数据分析： - 每天约 1000 万条微博，每条平均被10个子系统读取，总消息读取量达 1 亿次。 - 峰值设计需按平均值的4倍计算，得出： - TPS（消息写入）：1380 - QPS（消息读取）：13800 10.1.3.3 可扩展性 消息队列功能需求明确，后期扩展需求有限，因此可扩展性不是主要复杂度。 10.1.4 备选方案 10.1.4.1 方案 1：引入开源 Kafka 直接部署并优化 Kafka 系统，快速实现高性能与高可靠性的需求。 10.1.4.2 方案 2：集群 + MySQL 存储 利用分布式集群架构，结合 MySQL 实现消息存储。 10.1.4.3 方案 3：集群 + 自研存储 基于自研的存储机制构建分布式消息队列，满足定制化需求。 10.1.5 备选方案评估 评估维度 方案 1：开源 Kafka 方案 2：集群 + MySQL 方案 3：集群 + 自研存储 实现难度 低，开源成熟方案，已有丰富文档和社区支持 中，需处理分布式集群与 MySQL 性能优化 高，自研存储需从零开发，复杂度大 开发周期 短，可快速部署 中，MySQL 优化与集群管理需额外时间 长，存储系统开发与调优周期较长 性能 高，Kafka 原生支持高并发场景 中，MySQL 写入性能可能成为瓶颈 可定制，性能视具体实现效果而定 可靠性 高，内置多副本机制，保障消息高可用 中，需额外设计主备切换与复制机制 可调控，可靠性视自研设计而定 扩展性 高，Kafka 原生支持动态扩展 中，MySQL 集群扩展较复杂 高，自研方案可完全适配业务需求 成本 低，无需额外研发成本 中，需资源优化成本 高，自研存储成本较高 10.1.6 最终架构设计 10.1.6.1 总体方案 采用 “集群 + MySQL 存储” 的架构，兼顾开发周期、成本控制与性能需求，具体设计如下： - 系统采用数据分散集群，按业务需求分组存储消息。 - 每个分组包含 1 台主 MySQL 和 1 台备 MySQL，主备间数据实时同步。 10.1.6.2 架构总览 架构图如下： [子系统A] --&gt; [消息队列主节点] --&gt; [MySQL主/备] [子系统B] --&gt; [消息队列主节点] --&gt; [MySQL主/备] 10.1.7 核心设计与流程 10.1.7.1 高可用设计 消息发送可靠性：提供 SDK 支持轮询发送，当主节点宕机时自动切换到备节点。 消息存储可靠性：主备 MySQL 实现数据同步，复制延迟超限时发出告警。 消息读取可靠性：备服务器仅在主服务器故障时对外提供读取服务。 10.1.7.2 高性能设计 按业务场景优化读写性能，峰值目标：TPS = 1380，QPS = 13800。 10.1.7.3 安全设计 身份识别：通过身份标识与接入密钥进行身份校验。 队列权限：严格控制队列的读写权限，确保敏感数据的安全性。 10.1.8 部署方案 服务器规格：32 核 CPU，48GB 内存，512GB SSD。 部署方式：主/备混布方式（每台服务器部署一个主 MySQL 和一个消息队列主节点）。 10.1.9 演进规划 第一期：实现消息发送与权限控制功能，3 个月内上线。 第二期：完善消息读取功能，1 个月内上线。 第三期：集成 ZooKeeper 实现主备自动切换，预计 2 周完成。 10.1.10 总结 通过上述架构设计，前浪微博可以有效解决系统耦合问题，实现高性能和高可靠性的业务需求，同时为后续的业务扩展预留了充足的技术支持能力。 10.2 话架构图 10.2.1 4+1 视图：软件架构的经典模型 10.2.1.1 什么是 4+1 视图？ 提到软件系统架构图，许多人都会联想到 4+1 视图，因为它被视为描述软件架构的经典标准。但到底什么是 4+1 视图？是否按其标准画图就能满足所有需求？我们从其由来说起。 1995 年，Philippe Kruchten 在论文中指出，使用单一视图描述软件架构存在局限性，例如过分强调某个方面（如数据工程、运行效率或团队组织），无法满足所有用户需求。为解决这些问题，他提出了 4+1 视图 模型。 核心理念 4+1 视图通过五个并发视图，从不同角度剖析系统架构： 逻辑视图：从终端用户的角度描述系统提供的功能。对应 UML 的类图（Class Diagram）和状态图（State Diagram）。 处理视图：从动态角度描述系统的运行时行为和交互。对应 UML 的序列图（Sequence Diagram）和活动图（Activity Diagram）。 开发视图：从开发者角度描述系统的模块化结构。对应 UML 的包图（Package Diagram）。 物理视图：从系统工程师的角度描述系统的物理部署架构。对应 UML 的部署图（Deployment Diagram）。 场景视图：从用户角度描述系统需要满足的功能需求。对应 UML 的用例图（Use Case Diagram）。 逻辑视图和场景视图的区别 逻辑视图描述系统的功能，而场景视图关注用户需求。例如： - “取款”需求可能涉及多个功能：插卡、密码验证、出钞。 - 一个功能（如密码验证）可能服务于多个需求，如“取款”和“转账”。 10.2.1.2 4+1 视图的挑战 尽管 4+1 视图全面且规范，但在实际工作中，很多团队并不常用，原因主要有以下几点： 复杂度增加 1995 年的系统大多是单体架构，而如今分布式系统盛行。例如，在微服务架构下，数量众多的服务让开发视图（Development View）变得难以直观呈现。 工具限制 4+1 视图通常与 UML 图绑定，但 UML 图存在表达能力不足、美观性差的问题。对比下图，UML 图的直观性和美观度显得逊色： 对比图 概念混淆 逻辑视图、开发视图和处理视图的界限容易混淆。例如： 逻辑视图被误解为类结构图。 开发视图与处理视图常被等同。 甚至有人认为逻辑视图与开发视图是一回事。 这些问题导致 4+1 视图在当代实际应用中使用率偏低。 10.2.1.3 解决方案：4R 架构定义 4R 架构定义 提供了一种更现代且灵活的方法。它通过 4 个核心概念（Rank、Role、Relation、Rule），明确架构图的重点内容。 Rank（层级） 明确系统所属的级别（如 L0 ~ L4），避免在一张图中展现过多细节。 Role（角色） 分解系统角色，如架构图中的模块、节点或组件。 Relation（关系） 定义角色之间的交互关系，通常通过连接线表示。 Rule（规则） 描述系统角色间的协作方式，通常通过序列图展现。 静态 vs 动态架构图 - 静态架构图：描述 Role 和 Relation，例如模块之间的依赖关系。通常 1-2 张即可。 - 动态架构图：描述 Rule，即系统运行时的行为流程，通常针对核心场景绘制多张序列图。 10.2.1.4 常见架构图类型 根据不同的分析角度，架构图可以划分为以下几类： 业务架构图 定义：描述系统对用户提供的业务功能，类似 4+1 视图中的场景视图。 使用场景： 产品规划和汇报。 向高层汇报业务发展。 培训新员工。 画图技巧： 用颜色区分业务状态。 将类似业务分组。 调整区块对齐，提升美观性。 案例：AlipayHK 的业务架构图展示了钱包业务、商家服务等分组及业务状态。 客户端和前端架构图 定义：描述客户端或前端的逻辑分层。 使用场景： 架构设计与培训。 画图技巧： 用颜色标识角色。 用连接线表示关系，区分调用与事件通知。 对模块进行分层或分组。 案例：微信客户端架构 3.x 图使用颜色和连接线展现模块间的分工和依赖。 系统架构图 定义：描述后端系统的逻辑架构。 使用场景： 架构设计与培训。 画图技巧： 用颜色区分模块。 分组展现逻辑关联。 案例：MongoDB Sharding 系统架构图展现了路由器、配置服务器和分片服务器的角色。 应用架构图 定义：描述后端系统由哪些应用组成。 使用场景： 项目开发、测试与运维。 画图技巧： 复杂系统按子域划分，逐层展示。 案例：支付中台的会员域应用架构图。 部署架构图 定义：描述系统的物理部署，包括机房、网络和硬件信息。 使用场景： 运维规划与优化。 画图技巧： 用图标替代区块，增强直观性。 案例：支付系统的部署架构图。 系统序列图 定义：描述业务场景下系统角色的交互。 使用场景： 核心场景设计与分析。 画图技巧： 使用 UML 的序列图工具。 案例：扫码支付场景的系统序列图展示了支付中台内部系统的调用链。 10.2.1.5 架构图标准的未来 除了 4+1 视图，业界还存在其他架构模型，如 TOGAF 和 C4 模型（Context、Container、Component、Code）。 - TOGAF：企业级架构，适用于 CTO 层级的规划。 - C4 模型：结构清晰，但表达能力有限。 结合多年的实践经验，我推荐基于 4R 思路的架构图绘制方法，这种方法在华为、阿里、蚂蚁等企业中经过了不同业务场景和规模的验证，适用性强且简单易用。 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
